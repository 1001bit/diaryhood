services:
    gateway:
        build: ./services/gateway
        environment:
            PORT: ${SERVER_PORT}
            JWT_SECRET: ${JWT_SECRET}
        ports:
            - 80:${SERVER_PORT}
        networks:
            - network
        restart: always

    storage:
        build: ./services/storage
        environment:
            PORT: ${SERVER_PORT}
        volumes:
            - ./storage:/app/storage:ro
        networks:
            - network
        restart: always

    user:
        build: ./services/user
        environment:
            PORT: ${SERVER_PORT}

            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_PORT: ${POSTGRES_PORT}

            REDIS_PORT: ${REDIS_PORT}
            JWT_SECRET: ${JWT_SECRET}
        networks:
            - network
        restart: always
        depends_on:
            - user-postgres
            - otp-redis
            - refresh-redis

    otp-redis:
        image: redis:7.4-alpine
        restart: always
        volumes:
            - otp-redis:/data
        networks:
            - network

    refresh-redis:
        image: redis:7.4-alpine
        restart: always
        volumes:
            - refresh-redis:/data
        networks:
            - network

    user-postgres:
        image: postgres:17-alpine
        environment:
            POSTGRES_USER: user
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: database
        networks:
            - network
        volumes:
            - user-postgres:/var/lib/postgresql/data
            - ./user-postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -d $POSTGRES_DB -U $POSTGRES_USER" ]
            interval: 1m30s
            timeout: 30s
            retries: 5
            start_period: 30s

    adminer:
        image: adminer
        restart: always
        ports:
            - 8080:8080
        networks:
            - network

    redis-commander:
        image: rediscommander/redis-commander:latest
        container_name: redis-commander
        environment:
            - REDIS_HOSTS=local:refresh-redis:${REDIS_PORT},local:otp-redis:${REDIS_PORT}
        ports:
            - "8081:8081"
        networks:
            - network
        restart: always
        depends_on:
            - otp-redis
            - refresh-redis

networks:
    network:
        driver: bridge

volumes:
    user-postgres: null
    otp-redis: null
    refresh-redis: null
