services:
    gateway:
        build: ./services/gateway
        environment:
            PORT: ${SERVER_PORT}
            STORAGE_HOST: ${STORAGE_HOST}
            USER_HOST: ${USER_HOST}
            AUTH_HOST: ${AUTH_HOST}
        ports:
            - 80:${SERVER_PORT}
        networks:
            - storage
            - user
        restart: always

    storage:
        build: ./services/storage
        environment:
            PORT: ${SERVER_PORT}
        volumes:
            - ./storage:/app/storage:ro
        networks:
            - storage
        restart: always

    email:
        build: ./services/email
        environment:
            PORT: ${SERVER_PORT}
        networks:
            - email
        restart: always

    user:
        build: ./services/user
        environment:
            PORT: ${SERVER_PORT}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_PORT: ${POSTGRES_PORT}
            USER_POSTGRES_HOST: ${USER_POSTGRES_HOST}
        networks:
            - user-postgres
            - user
        restart: always
        depends_on:
            - user-postgres

    auth:
        build: ./services/auth
        environment:
            PORT: ${SERVER_PORT}
            USER_HOST: ${USER_HOST}
            EMAIL_HOST: ${EMAIL_HOST}
            AUTH_REDIS_HOST: ${AUTH_REDIS_HOST}
            REDIS_PORT: ${REDIS_PORT}
        networks:
            - user
            - auth-redis
            - email
        restart: always
        depends_on:
            - auth-redis

    auth-redis:
        image: redis:7.4-alpine
        restart: always
        volumes:
            - auth-redis:/data
        networks:
            - auth-redis

    user-postgres:
        image: postgres:17-alpine
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
        networks:
            - user-postgres
        volumes:
            - user-postgres:/var/lib/postgresql/data
            - ./user-postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
            interval: 1m30s
            timeout: 30s
            retries: 5
            start_period: 30s

    adminer:
        image: adminer
        restart: always
        ports:
            - 8080:8080
        networks:
            - user-postgres

networks:
    storage:
        driver: bridge
    user-postgres:
        driver: bridge
    user:
        driver: bridge
    auth-redis:
        driver: bridge
    email:
        driver: bridge

volumes:
    user-postgres: null
    auth-redis: null
