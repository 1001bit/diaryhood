services:
    # GATEWAY
    gateway:
        build: ./services/gateway
        environment:
            PORT: ${SERVER_PORT}
            JWT_SECRET: ${JWT_SECRET}
        ports:
            - 80:${SERVER_PORT}
        networks:
            - network
        restart: always

    # STORAGE
    storage:
        build: ./services/storage
        environment:
            PORT: ${SERVER_PORT}
        volumes:
            - ./static:/app/storage/static:ro
            - dynamic-storage:/app/storage/dynamic
        networks:
            - network
        restart: always

    # USER
    user:
        build: ./services/user
        environment:
            PORT: ${SERVER_PORT}

            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_PORT: ${POSTGRES_PORT}

            REDIS_PORT: ${REDIS_PORT}
            JWT_SECRET: ${JWT_SECRET}

            RABBITMQ_USER: ${RABBITMQ_DEFAULT_USER}
            RABBITMQ_PASS: ${RABBITMQ_DEFAULT_PASS}
            RABBITMQ_PORT: ${RABBITMQ_PORT}
        networks:
            - network
        restart: always

    otp-redis:
        image: redis:7.4-alpine
        restart: always
        volumes:
            - otp-redis:/data
        networks:
            - network

    refresh-redis:
        image: redis:7.4-alpine
        restart: always
        volumes:
            - refresh-redis:/data
        networks:
            - network

    user-postgres:
        image: postgres:17-alpine
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
        networks:
            - network
        volumes:
            - user-postgres:/var/lib/postgresql/data
            - ./sql/user-postgres.init.sql:/docker-entrypoint-initdb.d/init.sql:ro

    # PATH
    path:
        build: ./services/path
        environment:
            PORT: ${SERVER_PORT}

            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_PORT: ${POSTGRES_PORT}

            JWT_SECRET: ${JWT_SECRET}
        networks:
            - network
        restart: always

    path-postgres:
        image: postgres:17-alpine
        environment:
            # TODO: Create separate credentials for path postgres
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
        networks:
            - network
        volumes:
            - path-postgres:/var/lib/postgresql/data
            - ./sql/path-postgres.init.sql:/docker-entrypoint-initdb.d/init.sql:ro

    # EMAIL
    email:
        build: ./services/email
        environment:
            MG_DOMAIN: ${MG_DOMAIN}
            MG_API_KEY: ${MG_API_KEY}

            RABBITMQ_USER: ${RABBITMQ_DEFAULT_USER}
            RABBITMQ_PASS: ${RABBITMQ_DEFAULT_PASS}
        networks:
            - network
        restart: always

    email-rabbitmq:
        image: rabbitmq:4.0.2-management
        ports:
            - "15672:15672" # RabbitMQ management UI
        networks:
            - network
        environment:
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
        restart: always

    # LOGGING
    grafana:
        image: grafana/grafana
        ports:
            - 3000:3000
        volumes:
            - ./config/grafana-sources.yml:/etc/grafana/provisioning/datasources/datasources.yaml
        networks:
            - network

    loki:
        image: grafana/loki
        command: -config.file=/etc/loki/local-config.yaml
        logging:
            driver: local
        volumes:
            - loki:/loki
        networks:
            - network

    promtail:
        image: grafana/promtail
        volumes:
            - ./config/promtail.yml:/etc/promtail/config.yaml:ro
            - /var/run/docker.sock:/var/run/docker.sock
        command: -config.file=/etc/promtail/config.yaml
        networks:
            - network
        depends_on:
            - loki

    # ADMIN
    adminer:
        image: adminer
        restart: always
        ports:
            - 8080:8080
        networks:
            - network

    redis-commander:
        image: rediscommander/redis-commander:latest
        container_name: redis-commander
        environment:
            REDIS_HOSTS: local:refresh-redis:${REDIS_PORT},local:otp-redis:${REDIS_PORT}
        ports:
            - "8081:8081"
        networks:
            - network
        restart: always

networks:
    network:
        driver: bridge

volumes:
    user-postgres: null
    path-postgres: null
    otp-redis: null
    refresh-redis: null
    loki: null
    dynamic-storage: null
