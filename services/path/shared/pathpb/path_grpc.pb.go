// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: protobuf/path.proto

package pathpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PathServiceClient is the client API for PathService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PathServiceClient interface {
	CreatePath(ctx context.Context, in *CreatePathRequest, opts ...grpc.CallOption) (*Empty, error)
}

type pathServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPathServiceClient(cc grpc.ClientConnInterface) PathServiceClient {
	return &pathServiceClient{cc}
}

func (c *pathServiceClient) CreatePath(ctx context.Context, in *CreatePathRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pathpb.PathService/CreatePath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PathServiceServer is the server API for PathService service.
// All implementations must embed UnimplementedPathServiceServer
// for forward compatibility
type PathServiceServer interface {
	CreatePath(context.Context, *CreatePathRequest) (*Empty, error)
	mustEmbedUnimplementedPathServiceServer()
}

// UnimplementedPathServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPathServiceServer struct {
}

func (UnimplementedPathServiceServer) CreatePath(context.Context, *CreatePathRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePath not implemented")
}
func (UnimplementedPathServiceServer) mustEmbedUnimplementedPathServiceServer() {}

// UnsafePathServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PathServiceServer will
// result in compilation errors.
type UnsafePathServiceServer interface {
	mustEmbedUnimplementedPathServiceServer()
}

func RegisterPathServiceServer(s grpc.ServiceRegistrar, srv PathServiceServer) {
	s.RegisterService(&PathService_ServiceDesc, srv)
}

func _PathService_CreatePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PathServiceServer).CreatePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathpb.PathService/CreatePath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PathServiceServer).CreatePath(ctx, req.(*CreatePathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PathService_ServiceDesc is the grpc.ServiceDesc for PathService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PathService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pathpb.PathService",
	HandlerType: (*PathServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePath",
			Handler:    _PathService_CreatePath_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/path.proto",
}
